[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 C. Huang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/making-xmaps.html","id":"nomenclature-crossmaps","dir":"Articles","previous_headings":"","what":"Nomenclature Crossmaps","title":"Making Valid Crossmaps","text":"(Nomenclature) Crossmap encodes complete redistribution values source target classifications directed, bipartite, weighted graph. Numeric values transformed using valid Crossmap sum total source target classifications. valid Crossmap satisfies following conditions: one link distinct source target node source node, sum weights attached outgoing links sums one. outgoing incoming properties graph links determine type data transformation encoded given crossmap. Recode: Maps one--one relations recode category labels, leaving attached values untouched Collapse: Maps least one set many--one/one--many links (.e. multiple source categories collapsed single target category) involve kind aggregation source values. Split: Maps least one set one--many links (.e. single source category split multiple target categories) involve redistribution source values.","code":""},{"path":"/articles/making-xmaps.html","id":"crossmap-tables-xmap_df","dir":"Articles","previous_headings":"Nomenclature Crossmaps","what":"Crossmap tables: xmap_df","title":"Making Valid Crossmaps","text":"xmap_df data.frame representation Crossmap, row represents weighted link source target classifications. can create xmap_df data.frame tibble weighted edges using as_xmap_df(). input table x needs least 3 complete (.e. NA) columns: : source classification labels. : target classification labels weights: applied values source classification Additional columns (e.g. label descriptions etc.) can retained using .keep_all argument. as_xmap_df() validate x: duplicates -pairs, Every group weights associated distinct value sums 1 (subject minor floating point errors).","code":""},{"path":[]},{"path":"/articles/making-xmaps.html","id":"row-wise-creation","dir":"Articles","previous_headings":"Creating Crossmaps Tables","what":"Row-wise creation","title":"Making Valid Crossmaps","text":"following example shows encode one--one, many--one one--many links coerce xmap_df. method suitable simple crossmaps.","code":"library(xmap)  simple_x <- tibble::tribble(   ~source, ~target, ~share,   \"equal\", \"EQUAL\", 1,       # one-to-one   \"member_1\", \"GROUP\", 1,    # many-to-one   \"member_2\", \"GROUP\", 1,   \"whole\", \"PART_1\", 0.3,    # one-to-many   \"whole\", \"PART_2\", 0.6,   \"whole\", \"PART_3\", 0.1 )  simple_xmap <- simple_x |>   as_xmap_df(from = source, to = target, weights = share)  simple_xmap ## xmap_df: ## recode, split, and collapse   ## (source -> target) BY share ## # A tibble: 6 × 3 ##   source   target share ##   <chr>    <chr>  <dbl> ## 1 equal    EQUAL    1   ## 2 member_1 GROUP    1   ## 3 member_2 GROUP    1   ## 4 whole    PART_1   0.3 ## 5 whole    PART_2   0.6 ## 6 whole    PART_3   0.1"},{"path":"/articles/making-xmaps.html","id":"coercion-from-crosswalks","dir":"Articles","previous_headings":"Creating Crossmaps Tables","what":"Coercion from Crosswalks","title":"Making Valid Crossmaps","text":"common want convert existing correspondence crossmap. conversions require attaching appropriate weights existing crosswalk table.","code":""},{"path":"/articles/making-xmaps.html","id":"recode-maps","dir":"Articles","previous_headings":"Creating Crossmaps Tables > Coercion from Crosswalks","what":"Recode maps","title":"Making Valid Crossmaps","text":"Consider first five country codes ISO 3166 international standard one--one correspondence 2-digit, 2-digit numeric codes. create crossmap ISONumeric ISO2, simply add weights columns coerce xmap_df: Notice as_xmap_df() place , weights columns first.","code":"iso_codes <- tibble::tribble(               ~country, ~ISO2, ~ISO3, ~ISONumeric,          \"Afghanistan\",          \"AF\",         \"AFG\",    \"004\",              \"Albania\",          \"AL\",         \"ALB\",    \"008\",              \"Algeria\",          \"DZ\",         \"DZA\",    \"012\",       \"American Samoa\",          \"AS\",         \"ASM\",    \"016\",              \"Andorra\",          \"AD\",         \"AND\",    \"020\"       ) iso_xmap <- iso_codes |>   dplyr::mutate(link = 1) |>   as_xmap_df(from = ISONumeric, to = ISO2, weights = link, .keep_all = TRUE) print(iso_xmap) ## xmap_df: ## recode  ## (ISONumeric -> ISO2) BY link ## # A tibble: 5 × 5 ##   ISONumeric ISO2   link country        ISO3  ##   <chr>      <chr> <dbl> <chr>          <chr> ## 1 004        AF        1 Afghanistan    AFG   ## 2 008        AL        1 Albania        ALB   ## 3 012        DZ        1 Algeria        DZA   ## 4 016        AS        1 American Samoa ASM   ## 5 020        AD        1 Andorra        AND"},{"path":"/articles/making-xmaps.html","id":"collapse-maps-aggregation","dir":"Articles","previous_headings":"Creating Crossmaps Tables > Coercion from Crosswalks","what":"Collapse maps: Aggregation","title":"Making Valid Crossmaps","text":"Now consider aggregating data collected using ISO 3166-2 Subdivisions Australia Canada: Recall need one row per relation source (adm1) target (ctr) nomenclature. Thus split string list vector, unnest values country. Since aggregation involves one--one transfer values adm1 ctr prior collapsing ctr groups, simple add weights one form valid crossmap:","code":"adm1_list <- tibble::tribble(   ~ctr, ~adm1,   \"AU\", \"AU-NSW, AU-QLD, AU-SA, AU-TAS, AU-VIC, AU-WA, AU-ACT, AU-NT\",   \"CA\", \"CA-AB, CA-BC, CA-MB, CA-NB, CA-NL, CA-NS, CA-ON, CA-PE, CA-QC, CA-SK, CA-NT, CA-NU, CA-YT\" ) agg_x <- adm1_list |>    dplyr::mutate(adm1 = stringr::str_split(adm1, \", \")) |>   tidyr::unnest(cols = c(adm1))  agg_x ## # A tibble: 21 × 2 ##    ctr   adm1   ##    <chr> <chr>  ##  1 AU    AU-NSW ##  2 AU    AU-QLD ##  3 AU    AU-SA  ##  4 AU    AU-TAS ##  5 AU    AU-VIC ##  6 AU    AU-WA  ##  7 AU    AU-ACT ##  8 AU    AU-NT  ##  9 CA    CA-AB  ## 10 CA    CA-BC  ## # … with 11 more rows agg_xmap <- agg_x |>   dplyr::mutate(link = 1) |>   as_xmap_df(from = adm1, to = ctr, weights = link)  #> xmap_df: #> recode and collapse #> (adm1 -> ctr) BY link #> # A tibble: 21 × 3 #>    adm1   ctr    link #>    <chr>  <chr> <dbl> #>  1 AU-NSW AU        1 #>  2 AU-QLD AU        1 #>  3 AU-SA  AU        1 #>  4 AU-TAS AU        1 #>  5 AU-VIC AU        1 #>  6 AU-WA  AU        1 #>  7 AU-ACT AU        1 #>  8 AU-NT  AU        1 #>  9 CA-AB  CA        1 #> 10 CA-BC  CA        1 #> # … with 11 more rows"},{"path":"/articles/making-xmaps.html","id":"split-maps-disaggregation","dir":"Articles","previous_headings":"Creating Crossmaps Tables > Coercion from Crosswalks","what":"Split maps: Disaggregation","title":"Making Valid Crossmaps","text":"Conversely, might aggregate level data want disaggregate. Continuing example, involve incorporating country level data analysis 3166-2 Subdivisions level. example, imagine population figures Australia 3166-2 level 9 10 years, country level figures missing year. simple example, reasonable harmonisation design involve splitting country level figure subdivision level population proportions year preceding following missing year. Alternatively, might want compare aggregate disaggregate statistics identify discrepancies.","code":"state_data <- tibble::tribble(                               ~state,    ~adm1,    ~Pop,                    \"New South Wales\", \"AU-NSW\", 8153600,                           \"Victoria\", \"AU-VIC\", 6613700,                         \"Queensland\", \"AU-QLD\", 5322100,                    \"South Australia\",  \"AU-SA\", 1820500,                  \"Western Australia\",  \"AU-WA\", 2785300,                           \"Tasmania\", \"AU-TAS\",  571500,                 \"Northern Territory\",  \"AU-NT\",  250600,       \"Australian Capital Territory\", \"AU-ACT\",  456700 )  state_xmap <- state_data |>   dplyr::mutate(ctr = \"AU\",                 adm1,                 share = Pop / sum(Pop)) |>   as_xmap_df(from = ctr, to = adm1, weights = share, .keep_all = FALSE) ## Warning: Dropped additional columns in `x` #> xmap_df: #> split #> (ctr -> adm1) BY share #> # A tibble: 8 × 3 #>   ctr   adm1     share #>   <chr> <chr>    <dbl> #> 1 AU    AU-NSW 0.314 #> 2 AU    AU-VIC 0.255 #> 3 AU    AU-QLD 0.205 #> 4 AU    AU-SA  0.0701 #> 5 AU    AU-WA  0.107 #> 6 AU    AU-TAS 0.0220 #> 7 AU    AU-NT  0.00965 #> 8 AU    AU-ACT 0.0176"},{"path":"/articles/making-xmaps.html","id":"mixed-maps","dir":"Articles","previous_headings":"Creating Crossmaps Tables","what":"Mixed Maps","title":"Making Valid Crossmaps","text":"Now consider following mixed transformation using selected correspondences NAICS Canada 1997 ISIC Revision 3. Imagine numeric data (e.g. gross output CAD) collected NAICS Canada nomenclature want harmonise ISIC Revision 3. correspondence two nomenclature contains mixture one--one, one--many, many--one many--many relations. Luckily, need deal two cases forming crossmap: links unit weights (recode collapse) , links fractional weights (split). Let’s first define example correspondences.1 first example, one NAICS Canada class relates exactly one ISIC class. second example, one ISIC class equivalent one NAICS Canada class. asterisk (Partial Flag) indicates part ISIC D1543 equivalent NAICS Canada class. ISIC activities corresponding NAICS Canada class listed column labelled “Link”. third example, one NAICS Canada class equivalent one ISIC class.","code":"canada_recode <- tibble::tibble(   NAICS1997      = \"212210\",    NAICS1997_desc = \"Iron Ore Mining\",   ISIC3          = \"C1310\",   ISIC3_desc    = \"Mining of iron ores\" ) ## # A tibble: 1 × 4 ##   NAICS1997 NAICS1997_desc  ISIC3 ISIC3_desc          ##   <chr>     <chr>           <chr> <chr>               ## 1 212210    Iron Ore Mining C1310 Mining of iron ores canada_agg <- tibble::tribble(   ~NAICS1997, ~NAICS1997_desc, ~ISIC3, ~ISIC3_desc, ~Link,   \"311320\", \"Chocolate and Confectionery Manufacturing from Cacao Beans\", \"D1543 *\", \"Manufacture of cocoa, chocolate and sugar confectionery\", \"Chocolate and confectionery, made from cacao beans\",   \"311330\", \"Confectionery Manufacturing from Purchased Chocolate\", \"D1543 *\", \"Manufacture of cocoa, chocolate and sugar confectionery\", \"Confectionery, made from purchased chocolate\",   \"311340\", \"Non-Chocolate Confectionery Manufacturing\", \"D1543 *\", \"Manufacture of cocoa, chocolate and sugar confectionery\", \"Non-chocolate confectionery, manufacturing\" ) ## # A tibble: 3 × 5 ##   NAICS1997 NAICS1997_desc                                   ISIC3 ISIC3…¹ Link  ##   <chr>     <chr>                                            <chr> <chr>   <chr> ## 1 311320    Chocolate and Confectionery Manufacturing from … D154… Manufa… Choc… ## 2 311330    Confectionery Manufacturing from Purchased Choc… D154… Manufa… Conf… ## 3 311340    Non-Chocolate Confectionery Manufacturing        D154… Manufa… Non-… ## # … with abbreviated variable name ¹​ISIC3_desc canada_split <- tibble::tribble(   ~NAICS1997, ~NAICS1997_desc, ~ISIC3, ~ISIC3_desc, ~Link,   \"483213\", \"Inland Water Transportation (except by Ferries)\", \"I6110 *\", \"Sea and coastal water transport\", \"Intracoastal water transportation\",   \"483213\", \"Inland Water Transportation (except by Ferries)\", \"I6120 *\", \"Inland water transport\", \"Inland water transportation (except ferries)\" ) ## # A tibble: 2 × 5 ##   NAICS1997 NAICS1997_desc                                  ISIC3  ISIC3…¹ Link  ##   <chr>     <chr>                                           <chr>  <chr>   <chr> ## 1 483213    Inland Water Transportation (except by Ferries) I6110… Sea an… Intr… ## 2 483213    Inland Water Transportation (except by Ferries) I6120… Inland… Inla… ## # … with abbreviated variable name ¹​ISIC3_desc"},{"path":"/articles/making-xmaps.html","id":"unit-weight-links","dir":"Articles","previous_headings":"Creating Crossmaps Tables > Mixed Maps","what":"Unit weight links","title":"Making Valid Crossmaps","text":"Notice recode collapse category relations, values attached source category directly modified “transfer” source target nomenclature. Instead, source values either retained, summarised category collapse (value aggregation) performed. Thus, shown , recode collapse links weight one. Let’s clean recode collapse links defined :","code":"canada_unit <- canada_agg |>   # remove the partial flag (*)   dplyr::mutate(ISIC3 = stringr::str_remove(ISIC3, \" \\\\*\")) |>   dplyr::select(-Link) |>   # bind the links together and add weights   dplyr::bind_rows(canada_recode) |>   dplyr::mutate(share = 1)  canada_unit ## # A tibble: 4 × 5 ##   NAICS1997 NAICS1997_desc                                   ISIC3 ISIC3…¹ share ##   <chr>     <chr>                                            <chr> <chr>   <dbl> ## 1 311320    Chocolate and Confectionery Manufacturing from … D1543 Manufa…     1 ## 2 311330    Confectionery Manufacturing from Purchased Choc… D1543 Manufa…     1 ## 3 311340    Non-Chocolate Confectionery Manufacturing        D1543 Manufa…     1 ## 4 212210    Iron Ore Mining                                  C1310 Mining…     1 ## # … with abbreviated variable name ¹​ISIC3_desc"},{"path":"/articles/making-xmaps.html","id":"fractional-weight-links","dir":"Articles","previous_headings":"Creating Crossmaps Tables > Mixed Maps","what":"Fractional weight links","title":"Making Valid Crossmaps","text":"Now remains prepare split links. Similar disaggregation example , need design weights allocate “pool” numeric value associated NAICS class 483213 corresponding ISIC classes I6110 I6120. Assume illustration purposes Canadian “Inland water transport” industry (I6120) twice big “Sea coastal water transport” industry (I6110). suggests weight 483213 I6120 twice I6110. Now let’s combine unit fractional links crossmap:","code":"canada_frac <- canada_split |>   dplyr::mutate(ISIC3 = stringr::str_remove(ISIC3, \" \\\\*\")) |>   dplyr::select(-Link) |>   dplyr::mutate(share = dplyr::case_when(ISIC3 == \"I6110\" ~ 0.33,                                   ISIC3 == \"I6120\" ~ 0.67,                                   T ~ NA_real_)) canada_xmap <- dplyr::bind_rows(canada_unit, canada_frac) |>   as_xmap_df(from = NAICS1997, to = ISIC3, weights = share)  print(canada_xmap) ## xmap_df: ## recode, split, and collapse   ## (NAICS1997 -> ISIC3) BY share ## # A tibble: 6 × 5 ##   NAICS1997 ISIC3 share NAICS1997_desc                                   ISIC3…¹ ##   <chr>     <chr> <dbl> <chr>                                            <chr>   ## 1 311320    D1543  1    Chocolate and Confectionery Manufacturing from … Manufa… ## 2 311330    D1543  1    Confectionery Manufacturing from Purchased Choc… Manufa… ## 3 311340    D1543  1    Non-Chocolate Confectionery Manufacturing        Manufa… ## 4 212210    C1310  1    Iron Ore Mining                                  Mining… ## 5 483213    I6110  0.33 Inland Water Transportation (except by Ferries)  Sea an… ## 6 483213    I6120  0.67 Inland Water Transportation (except by Ferries)  Inland… ## # … with abbreviated variable name ¹​ISIC3_desc"},{"path":"/articles/making-xmaps.html","id":"one-way-crossmaps","dir":"Articles","previous_headings":"","what":"One-Way Crossmaps","title":"Making Valid Crossmaps","text":"Except case recoding, crossmaps generally lateral (one-way). Weights collapse split links longer valid reverse direct link. Notice as_xmap_df() throws error try naively swap arguments: However, can swap arguments recode map. Recall ISO country code crossmap created : Imagine instead converting country codes ISO Numeric ISO-2 digit, wanted convert ISO-2 digit ISO Numeric. can take existing crossmap invert without editing weights: can also easily generate crossmaps nomenclature table:","code":"dplyr::bind_rows(canada_unit, canada_frac) |>   as_xmap_df(from = ISIC3, to = NAICS1997, weights = share) ## Error in `df_check_weights()`: ## ! Incomplete mapping weights found. Check sum of weights for each `from` ##   group sums to 1 print(iso_xmap) ## xmap_df: ## recode  ## (ISONumeric -> ISO2) BY link ## # A tibble: 5 × 5 ##   ISONumeric ISO2   link country        ISO3  ##   <chr>      <chr> <dbl> <chr>          <chr> ## 1 004        AF        1 Afghanistan    AFG   ## 2 008        AL        1 Albania        ALB   ## 3 012        DZ        1 Algeria        DZA   ## 4 016        AS        1 American Samoa ASM   ## 5 020        AD        1 Andorra        AND iso_xmap |>   as_xmap_df(from = ISO2, to = ISONumeric, weights = link) ## xmap_df: ## recode  ## (ISO2 -> ISONumeric) BY link ## # A tibble: 5 × 5 ##   ISO2  ISONumeric  link country        ISO3  ##   <chr> <chr>      <dbl> <chr>          <chr> ## 1 AF    004            1 Afghanistan    AFG   ## 2 AL    008            1 Albania        ALB   ## 3 DZ    012            1 Algeria        DZA   ## 4 AS    016            1 American Samoa ASM   ## 5 AD    020            1 Andorra        AND iso_xmap |>   as_xmap_df(from = ISO2, to = ISO3, weights = link) ## xmap_df: ## recode  ## (ISO2 -> ISO3) BY link ## # A tibble: 5 × 5 ##   ISO2  ISO3   link ISONumeric country        ##   <chr> <chr> <dbl> <chr>      <chr>          ## 1 AF    AFG       1 004        Afghanistan    ## 2 AL    ALB       1 008        Albania        ## 3 DZ    DZA       1 012        Algeria        ## 4 AS    ASM       1 016        American Samoa ## 5 AD    AND       1 020        Andorra"},{"path":"/articles/xmap.html","id":"creating-an-xmap_df-object","dir":"Articles","previous_headings":"","what":"Creating an xmap_df object","title":"Crossmaps for Data Transformation in R","text":"already valid crossmap table, turn xmap object specifying source () nodes, target () nodes, weights (weights): See vignette(\"making-xmaps.Rmd\") details validation conditions creating custom weights.","code":"links |>   as_xmap_df(from = ISIC2, to = ISIC3, weights = shares)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cynthia Huang. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Huang C (2023). xmap: xmap: data-structure extending crosswalks. R package version 0.0.0.9010.","code":"@Manual{,   title = {xmap: xmap: A data-structure for extending crosswalks},   author = {Cynthia Huang},   year = {2023},   note = {R package version 0.0.0.9010}, }"},{"path":"/index.html","id":"xmap-crossmaps-for-data-integration-in-r","dir":"","previous_headings":"","what":"xmap: A data-structure for extending crosswalks","title":"xmap: A data-structure for extending crosswalks","text":"xmap provides tools creating, validating modifying Nomenclature Crossmaps use Data Integration Harmonisation workflows (.e. {conformr}).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"xmap: A data-structure for extending crosswalks","text":"install latest development version conformr:","code":"remotes::install_github(\"cynthiahqy/conformr-project\", subdir = \"xmap\")"},{"path":"/reference/as_xmap_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a data.frame-like object to xmap_df — as_xmap_df","title":"Coerce a data.frame-like object to xmap_df — as_xmap_df","text":"creates valid crossmap can used map numeric values set source nodes set target nodes. function returns TRUE crossmaps xmap subclasses thereof (xmap_df), FALSE objects, including regular data.frames tibbles.","code":""},{"path":"/reference/as_xmap_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a data.frame-like object to xmap_df — as_xmap_df","text":"","code":"as_xmap_df(x, from, to, weights, .keep_all = TRUE)  is_xmap(x)  is_xmap_df(x)"},{"path":"/reference/as_xmap_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a data.frame-like object to xmap_df — as_xmap_df","text":"x as_xmap_df(): data.frame data.frame-like object is_xmap(): object test. , Columns x specifying source target nodes weights Column x specifying weight applied data passed along directed link source target node .keep_all Logical indicating whether keep additional columns x. Defaults TRUE.","code":""},{"path":"/reference/as_xmap_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a data.frame-like object to xmap_df — as_xmap_df","text":"crossmap xmap_df S3 object.","code":""},{"path":"/reference/as_xmap_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a data.frame-like object to xmap_df — as_xmap_df","text":"","code":"# For a well formed crossmap: links <- data.frame(   a = \"AUS\",   b = c(\"VIC\", \"NSW\", \"WA\", \"OTHER\"),   w = c(0.1, 0.15, 0.25, 0.5) ) as_xmap_df(links, from = a, to = b, weights = w) #> xmap_df: #> split  #> (a -> b) BY w #>     a     b    w #> 1 AUS   VIC 0.10 #> 2 AUS   NSW 0.15 #> 3 AUS    WA 0.25 #> 4 AUS OTHER 0.50  # extra columns are dropped, links$extra <- c(2, 4, 5, 6) as_xmap_df(links, from = a, to = b, weights = w) #> xmap_df: #> split  #> (a -> b) BY w #>     a     b    w extra #> 1 AUS   VIC 0.10     2 #> 2 AUS   NSW 0.15     4 #> 3 AUS    WA 0.25     5 #> 4 AUS OTHER 0.50     6"},{"path":"/reference/df_check.html","id":null,"dir":"Reference","previous_headings":"","what":"xmap_df validation helpers — df_check","title":"xmap_df validation helpers — df_check","text":"Checks issues xmap_df object.","code":""},{"path":"/reference/df_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"xmap_df validation helpers — df_check","text":"","code":"df_check_cols(df, col_attrs)  df_check_na(df)  df_check_col_order(df, col_from, col_to, col_weights)  df_check_col_type(df, col_weights)  df_check_from_set(df, col_from, from_set)  df_check_links(df, col_from, col_to)  df_check_weights(df, col_from, col_weights)"},{"path":"/reference/df_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"xmap_df validation helpers — df_check","text":"df data.frame-like object containing crossmap col_* character vector values naming columns df","code":""},{"path":"/reference/df_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"xmap_df validation helpers — df_check","text":"error validation condition fails, invisibly returns df otherwise.","code":""},{"path":"/reference/df_check.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"xmap_df validation helpers — df_check","text":"df_check_cols(): Abort named columns found xmap_df df_check_na(): Abort xmap_df missing values df_check_col_order(): Abort xmap_df columns order df_check_col_type(): Abort xmap_df wrong column types df_check_from_set(): Abort from_set attribute match xmap_df values df_check_links(): Abort xmap_df duplicate links df_check_weights(): Abort df invalid mapping weights","code":""},{"path":"/reference/new_xmap_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Low Level Constructor for xmap_df — new_xmap_df","title":"Low Level Constructor for xmap_df — new_xmap_df","text":"Low Level Constructor xmap_df","code":""},{"path":"/reference/new_xmap_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low Level Constructor for xmap_df — new_xmap_df","text":"","code":"new_xmap_df(x = data.frame(), col_from, col_to, col_weights, from_set = NULL)"},{"path":"/reference/new_xmap_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low Level Constructor for xmap_df — new_xmap_df","text":"col_from, col_to, col_weights character strings naming columns containing source nodes, target nodes numeric weights. checks argument types naively generates from_set missing","code":""},{"path":"/reference/new_xmap_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low Level Constructor for xmap_df — new_xmap_df","text":"x additional subclasses xmap xmap_df","code":""},{"path":"/reference/op-null-default.html","id":null,"dir":"Reference","previous_headings":"","what":"Defaults for NULL values — op-null-default","title":"Defaults for NULL values — op-null-default","text":"Defaults NULL values","code":""},{"path":"/reference/op-null-default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defaults for NULL values — op-null-default","text":"","code":"x %||% y"},{"path":"/reference/print.xmap_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an xmap_df — print.xmap_df","title":"Print an xmap_df — print.xmap_df","text":"Print xmap_df","code":""},{"path":"/reference/print.xmap_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an xmap_df — print.xmap_df","text":"","code":"# S3 method for xmap_df print(xmap_df)"},{"path":"/reference/validate_xmap_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for xmap_df objects — validate_xmap_df","title":"Validator for xmap_df objects — validate_xmap_df","text":"Validator xmap_df objects","code":""},{"path":"/reference/validate_xmap_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for xmap_df objects — validate_xmap_df","text":"","code":"validate_xmap_df(x)"},{"path":"/reference/xmap-has.html","id":null,"dir":"Reference","previous_headings":"","what":"Boolean flags for xmap properties — xmap-has","title":"Boolean flags for xmap properties — xmap-has","text":"has_*() is_*() functions check properties used validate /print xmaps. functions accepts equal length vector inputs support subclasses xmap, check inputs xmap.","code":""},{"path":"/reference/xmap-has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boolean flags for xmap properties — xmap-has","text":"","code":"has_dup_links(x_from, x_to)  has_complete_weights(x_from, x_weights)  has_1to1(x_weights)  has_1toM(x_weights)  has_1fromM(x_to)  has_recode_only(x_weights, x_to)  has_collapse_recode_only(x_weights, x_to)  has_split_recode_only(x_weights, x_to)"},{"path":"/reference/xmap-has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boolean flags for xmap properties — xmap-has","text":"x_from, x_to, x_weights equal length vectors containing source-target node pairs","code":""},{"path":"/reference/xmap-has.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Boolean flags for xmap properties — xmap-has","text":"has_dup_links(): Returns TRUE xmap duplicate links has_complete_weights(): Returns TRUE xmap valid weights has_1to1(): Return TRUE xmap recodes labels has_1toM(): Return TRUE xmap splitting links has_1fromM(): Return TRUE xmap collapsing links has_recode_only(): Return TRUE xmap recodes labels . Return FALSE even one collapsing splitting link has_collapse_recode_only(): Return TRUE xmap least one set collapsing links, number recoding links, splitting links. has_split_recode_only(): Return TRUE xmap least one set splitting links, number recoding links (none), splitting","code":""},{"path":"/reference/xmap_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for xmap objects — xmap_validate","title":"Validator for xmap objects — xmap_validate","text":"Validator xmap objects","code":""},{"path":"/reference/xmap_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for xmap objects — xmap_validate","text":"","code":"xmap_validate(x)"},{"path":"/reference/xmap_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for xmap objects — xmap_validate","text":"x xmap validated","code":""},{"path":"/reference/xmap_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for xmap objects — xmap_validate","text":"x validation passes. Throws error otherwise.","code":""},{"path":"/reference/xmap_validate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Validator for xmap objects — xmap_validate","text":"methods found currently loaded packages.","code":""}]
